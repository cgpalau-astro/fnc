"""Kolmogorov–Smirnov test."""

import numpy as _np
import scipy as _scipy
import termcolor as _tc
from fnc import plot as _plot

__all__ = ["test", "result", "print_result", "plot"]

#-----------------------------------------------------------------------------

def test(sample, cdf, args=None):
    """Kolmogorov–Smirnov test. It determines whether the sample follows a
    cdf.

    Note
    ----
    1)  The cdf has to be vectorized.
    2)  The KS-statistic follows the distribution scipy.stats.kstwo.pdf(n=n),
        where n is the size of the sample."""
    if args is None:
        args = ()
    ks_statistic = _scipy.stats.kstest(sample, cdf, args=args, method="exact")[0]

    return ks_statistic


def result(sample, ks_statistic, alpha=0.05):
    """Return whether the sample follows the cdf according to the
    Kolmogorov–Smirnov test."""
    n = len(sample)
    k = _scipy.stats.kstwo.isf(q=alpha, n=n)

    if ks_statistic < k:
        return True

    return False


def print_result(sample, ks_statistic, alpha=0.05):
    """Print results of Kolmogorov–Smirnov test and return the result.

    Note
    ----
    1)  H0: sample follows cdf (or generated by cdf)
        H1: sample do not follow cdf

    2)  The Threshold k is arbitrary. It can be chosen such that:
        alpha = integral_{k}^{infinity} kstwo.pdf(x, n=n)
              = 1.0 - scipy.stats.kstwo.cdf(k, n=n).
        The inverse is given by: k = scipy.stats.kstwo.isf(q=alpha, n=n)

        If ks_statistic < k H0 is accepted.

    3)  The p-value allow us to check whether H0 is true without evaluating
        the threshold which depends on the sample size n.

        p-value = integral_{ks_statistic}^{infinity} kstwo.pdf(x, n=n)
                = scipy.stats.kstwo.sf(x=ks_statistic, n=n)

        If p-value > alpha H0 is accepted."""
    n = len(sample)
    k = _scipy.stats.kstwo.isf(q=alpha, n=n)
    pvalue = _scipy.stats.kstwo.sf(x=ks_statistic, n=n)

    print(f"Sample size  = {n:_}")
    print(f"KS-statistic = {ks_statistic:0.3f}")
    print(f"Threshold    = {k:0.3f} (α={alpha})")
    print(f"p-value      = {pvalue:0.3f}")

    if ks_statistic < k:
        h0 = _tc.colored("True", "green")
    else:
        h0 = _tc.colored("False", "red")
    print(f"Sample follows cdf (H0) = {h0}")


def plot(sample, cdf, args=None, kwargs=None, bounds=None, alpha=0.05):
    """CDF - ECDF plot for Kolmogorov–Smirnov test."""
    #----------------------------------------------------------------
    if args is None:
        args = ()
    if kwargs is None:
        kwargs = {}

    if bounds is None:
        intv = _np.max(_np.abs(_np.diff(_np.sort(sample))))
        x_min = _np.min(sample) - intv
        x_max = _np.max(sample) + intv
    else:
        x_min, x_max = bounds

    x = _np.linspace(x_min, x_max, 1_000)

    n = len(sample)
    #----------------------------------------------------------------
    _fig, ax = _plot.figure(2, 1, fc=(1.5, 2.0))

    #Cumulative density function
    y_cdf = cdf(x, *args, **kwargs)
    ax[0].plot(x, y_cdf, c="r")

    #Empirical cumulative density function
    ecdf = _scipy.stats.ecdf(sample)
    y_ecdf = ecdf.cdf.evaluate(x)
    ax[0].plot(x, y_ecdf, c="k")

    #Sample points
    ax[0].scatter(sample, _np.zeros(n), s=10.0, color="k")

    ax[0].set_ylabel("CDF")
    ax[0].set_xlabel("x")
    #----------------------------------------------------------------
    #Residuals
    y = y_ecdf - y_cdf
    ax[1].plot(x, y, c="k")
    ax[1].plot([x_min, x_max], [0.0, 0.0], linestyle="--", color="k")

    #Threshold for a given alpha
    k = _scipy.stats.kstwo.isf(q=alpha, n=n)
    ax[1].plot([x_min, x_max], [k, k],
               linestyle="--",
               color="r",
               label=f"α={alpha}")
    ax[1].plot([x_min, x_max], [-k, -k], linestyle="--", color="r")

    ax[1].set_xlabel("x")
    ax[1].set_ylabel("ECDF-CDF")
    ax[1].legend(loc='lower right')

#-----------------------------------------------------------------------------
